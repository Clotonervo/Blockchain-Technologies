// Block Chain should maintain only limited block nodes to satisfy the functions
// You should not have all the blocks added to the block chain in memory
// as it would cause a memory overflow.

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;

public class BlockChain {
    public static final int CUT_OFF_AGE = 10;
    private TransactionPool txPool = new TransactionPool();
    private HashMap<ByteArrayWrapper, BlockNode> hashToNode = new HashMap<>();;
    private BlockNode maxHeightNode;


    private class BlockNode {
        public Block b;
        public BlockNode parent;
        public ArrayList<BlockNode> children = new ArrayList<>();
        public int height;
        public UTXOPool utxoPool;

        public BlockNode(Block b, BlockNode parent, UTXOPool utxoPool){
            this.b = b;
            this.parent = parent;
            this.utxoPool = utxoPool;
            if (parent == null){
                this.height = 1;
            }
            else {
                this.height = parent.height + 1;
                parent.children.add(this);
            }
        }
    }

    /**
     * create an empty block chain with just a genesis block. Assume {@code genesisBlock} is a valid
     * block
     */
    public BlockChain(Block genesisBlock) {
        //Get all coinbase from the genesisBlock and add it to the node's UTXOPool
        UTXOPool utxoP = new UTXOPool();
        Transaction genesisBlockCoinbase = genesisBlock.getCoinbase();
        for (int i = 0; i < genesisBlockCoinbase.numOutputs(); i++) {
            Transaction.Output out = genesisBlockCoinbase.getOutput(i);
            UTXO utxo = new UTXO(genesisBlockCoinbase.getHash(), i);
            utxoP.addUTXO(utxo, out);
        }
        BlockNode node = new BlockNode(genesisBlock, null, utxoP);
        hashToNode.put(new ByteArrayWrapper(genesisBlock.getHash()), node);
        this.maxHeightNode = node;
    }

    /** Get the maximum height block */
    public Block getMaxHeightBlock() {
        return this.maxHeightNode.b;
    }

    /** Get the UTXOPool for mining a new block on top of max height block */
    public UTXOPool getMaxHeightUTXOPool() {
        return this.maxHeightNode.utxoPool;
    }

    /** Get the transaction pool to mine a new block */
    public TransactionPool getTransactionPool() {
        return txPool;
    }

    /**
     * Add {@code block} to the block chain if it is valid. For validity, all transactions should be
     * valid and block should be at {@code height > (maxHeight - CUT_OFF_AGE)}.
     *
     * <p>
     * For example, you can try creating a new block over the genesis block (block height 2) if the
     * block chain height is {@code <=
     * CUT_OFF_AGE + 1}. As soon as {@code height > CUT_OFF_AGE + 1}, you cannot create a new block
     * at height 2.
     *
     * @return true if block is successfully added
     */
    public boolean addBlock(Block block) {
        // Can not be a gensis block
        byte[] prevHash = block.getPrevBlockHash();
        if(prevHash == null){
            return false;
        }

        //Check and see if the previous block is there/ get correct branch
        BlockNode parentBlockNode = hashToNode.get(new ByteArrayWrapper(block.getPrevBlockHash()));
        if (parentBlockNode == null) {
            return false;
        }

        //Check that each transaction on the block is valid using the TXHandler from Assignment 1
        TxHandler handler = new TxHandler(parentBlockNode.utxoPool);
        ArrayList<Transaction> txs = block.getTransactions();
        Transaction[] txsArray = new Transaction[txs.size()];

        for(int i = 0; i < txs.size(); i++){
            txsArray[i] = txs.get(i);
        }
        Transaction[] validTxs = handler.handleTxs(txsArray);
        if (validTxs.length != txs.size()) {
            return false;
        }

        //Check and see if the height is valid, or if it is too far behind to be added
        if ((parentBlockNode.height + 1) <= maxHeightNode.height - CUT_OFF_AGE) {
            return false;
        }

        //Now get the new UTXOPool from handled transactions and add the coinbase to that utxoPool to store on block
        UTXOPool utxoPool = handler.getUTXOPool();
        Transaction blockCoinbase = block.getCoinbase();
        for (int i = 0; i < blockCoinbase.numOutputs(); i++) {
            Transaction.Output out = blockCoinbase.getOutput(i);
            UTXO utxo = new UTXO(blockCoinbase.getHash(), i);
            utxoPool.addUTXO(utxo, out);
        }

        //Make the node on the correct branch,
        BlockNode node = new BlockNode(block, parentBlockNode, utxoPool);
        hashToNode.put(new ByteArrayWrapper(block.getHash()), node);

        //Only make it the maxHeight if it is bigger, so that oldest gets returned
        if ((parentBlockNode.height + 1) > maxHeightNode.height) {
            maxHeightNode = node;
        }
        return true;
    }

    /** Add a transaction to the transaction pool */
    public void addTransaction(Transaction tx) {
        txPool.addTransaction(tx);
    }
}